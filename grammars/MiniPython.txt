<file_input> ::= (NEWLINE | <stmt>)* ENDMARKER
<stmt> ::= <simple_stmt> | <compound_stmt>
<simple_stmt> ::= <expr_stmt> | <flow_stmt>
<compound_stmt> ::= <if_stmt> | <while_stmt> | <for_stmt> | <funcdef> | <classdef> | <decorated>
<suite> ::= <simple_stmt> | NEWLINE INDENT (<stmt>)+ DEDENT

<expr_stmt> ::= <testlist_star_expr> ('=' <test> | <augassign> <testlist> | ('=' <testlist_star_expr>)*)
<testlist_star_expr> ::= (<test> | <star_expr>) (',' (<test> | <star_expr>))*
<augassign> ::= ('+=' | '-=' | '*=' | '/=' | '%=' | '**=' | '//=')

<flow_stmt> ::= 'pass' | 'break' | 'continue' | 'return' [<testlist>]

<if_stmt> ::= 'if' <test> ':' <suite> ('elif' <test> ':' <suite>)* ['else' ':' <suite>]
<while_stmt> ::= 'while' <test> ':' <suite> ['else' ':' <suite>]
<for_stmt> ::= 'for' <exprlist> 'in' <testlist> ':' <suite>

<funcdef> ::= 'def' NAME '(' [<varargslist>] ')' ':' <suite>
<varargslist> ::= (
	<vfpdef> ['=' <test>] (',' <vfpdef> ['=' <test>])* [
		',' '*' <vfpdef> (',' <vfpdef> '=' <test>)* [',' '**' <vfpdef>] | '**' <vfpdef>
	]
	| '*' <vfpdef> (',' <vfpdef> '=' <test>)* [',' ['**' <vfpdef>]]
	| '**' <vfpdef>
)
<vfpdef> ::= NAME

<classdef> ::= 'class' NAME ['(' [<arglist>] ')'] ':' <suite>
<arglist> ::= <argument> (',' <argument>)*  [',']
<argument> ::= <test> [<comp_for>] | <test> '=' <test> | '*' <test> | '**' <test>

<decorated> ::= <decorators> (<classdef> | <funcdef>)
<decorators> ::= <decorator> (<decorator>)*
<decorator> ::= '@' <dotted_name> ['(' [<arglist>] ')'] NEWLINE
<dotted_name> ::= NAME ('.' NAME)*

<test> ::= <or_test> ['if' <or_test> 'else' <test>]
<test_nocond> ::= <or_test>
<or_test> ::= <and_test> ('or' <and_test>)*
<and_test> ::= <not_test> ('and' <not_test>)*
<not_test> ::= 'not' <not_test> | <comparison>
<comparison> ::= <expr> (<comp_op> <expr>)*
<comp_op> ::= '<' | '>' | '==' | '>=' | '<=' | '<>' | '!=' | 'in' | 'not' 'in' | 'is'| 'is' 'not'
<star_expr> ::= '*' <expr>

<expr> ::= <term> (('+' | '-') <term>)*
<term> ::= <factor> (('*' | '/' | '%' | '//') <factor>)*
<factor> ::= ('+' | '-') <factor> | <power>
<power> ::= <atom_expr> ['**' <factor>]
<atom_expr> ::= <atom> (<trailer>)*
<trailer> ::= '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
<atom> ::= (
    '(' [testlist_comp] ')' | '[' [testlist_comp] ']' | '{' [dictmaker] '}'
    | NAME | NUMBER | (STRING)+ | 'None' | 'True' | 'False'
)
<testlist_comp> ::= (<test> | <star_expr>) (<comp_for> | (',' (<test> | <star_expr>))* [','])

<subscriptlist> ::= <subscript> (',' <subscript>)* [',']
<subscript> ::= <test> | [<test>] ':' [<test>]
<exprlist> ::= (<expr> | <star_expr>) (',' (<expr> | <star_expr>))* [',']
<testlist> ::= <test> (',' <test>)* [',']
<dictmaker> ::= <test> ':' <test> | '**' <expr> <comp_for> | (',' (<test> ':' <test> | '**' <expr>))* [',']

<comp_for> ::= 'for' <exprlist> 'in' <or_test> [<comp_iter>]
<comp_if> ::= 'if' <test_nocond> [<comp_iter>]
<comp_iter> ::= <comp_for> | <comp_if>
